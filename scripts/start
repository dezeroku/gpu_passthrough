#!/usr/bin/env bash

set -euo pipefail

# Start up the VM with GPU passthrough
# Takes care of:
# * isolating GPU and enabling it back
# * isolating CPU cores from the host
# * (optionally) disconnecting the monitor, so it automatically picks up passthrough

# SCRIPT
# To be used by the script, don't modify
AUTORANDR_STATE=""

SCRIPTS_DIR="$(readlink -f "$(dirname "$0")")"
cd "${SCRIPTS_DIR}/.." || exit

. "${SCRIPTS_DIR}/bootstrap.sh"

# The size is in KB
HUGEPAGES_SIZE="$((2 * 1024))"
HUGEPAGES_PATH="/sys/kernel/mm/hugepages/hugepages-${HUGEPAGES_SIZE}kB/nr_hugepages"

# Value of this is total_vm_memory / single_hugepage_size and should equal to half of the memory you set
# e.g. for 8G set we should allocate 4096 2MB pages
HUGEPAGES="$((VM_MEMORY_KB / HUGEPAGES_SIZE))"

IGNORE_CONFIG_DIFF="${IGNORE_CONFIG_DIFF:-false}"
IGNORE_HUGEPAGES_ALLOCATION="${IGNORE_HUGEPAGES_ALLOCATION:-false}"

function sanity_checks() {
	if ! get_vm_config "${VM_NAME}" ""; then
		echoerr "Couldn't obtain config for vm ${VM_NAME}"
		echoerr "Did you remember to run scripts/setup first?"
		exit 1
	fi

	if ! check_vm_config_matches_template "${VM_NAME}" "${VM_CONFIG}"; then
		echoerr "VM config does not match the XML"
		echoerr "Either run scripts/setup or run with IGNORE_CONFIG_DIFF=true"
		if [[ "${IGNORE_CONFIG_DIFF}" == "true" ]]; then
			echo "Proceeding because of IGNORE_CONFIG_DIFF=true"
		else
			echo "Stopping..."
			exit 1
		fi
	fi
}

function allocate_hugepages() {
	# Shamelessly taken from https://www.reddit.com/r/VFIO/comments/dmie86/comment/f513vii/?context=3
	# and modified to respect the values defined in the repo + Arch Wiki path for 2MB hugepages allocation
	# + some formatting changes

	local alloc_pages
	local tries

	echoerr "Allocating ${HUGEPAGES} hugepages..."
	echo $HUGEPAGES | sudo_quiet_tee "${HUGEPAGES_PATH}"
	alloc_pages="$(cat "${HUGEPAGES_PATH}")"

	tries=0
	while ((alloc_pages != HUGEPAGES && tries < 1000)); do
		# We kinda like our cache, let's not do it unless really needed
		#echo 3 > /proc/sys/vm/drop_caches
		echo 1 | sudo_quiet_tee /proc/sys/vm/compact_memory
		echo "$HUGEPAGES" | sudo_quiet_tee "${HUGEPAGES_PATH}"
		alloc_pages="$(cat "${HUGEPAGES_PATH}")"
		tries=$((tries + 1))
		echoerr "Try: ${tries} Got ${alloc_pages} / ${HUGEPAGES} pages"
	done

	if [ "$alloc_pages" -ne "$HUGEPAGES" ]; then
		echoerr "Not able to allocate hugepages"
		echoerr "Either resolve the issue or run with IGNORE_HUGEPAGES_ALLOCATION=true"
		if [[ ! "${IGNORE_HUGEPAGES_ALLOCATION}" == "true" ]]; then
			echoerr "Proceeding because of IGNORE_HUGEPAGES_ALLOCATION=true"
			return
		else
			echo 0 | sudo_quiet_tee "${HUGEPAGES_PATH}"
			echoerr "Stopping..."
			return 1
		fi
	fi

	echoerr "Allocation successful"
}

function free_hugepages() {
	echoerr "Freeing hugepages..."
	echo 0 | sudo_quiet_tee "${HUGEPAGES_PATH}"
	echoerr "Done"
}

function pre_vm() {
	# Isolate GPU
	driver_bind "vfio-pci" "${GPU_PCI_ID}" "${GPU_DEVICE_ID}"
	driver_bind "vfio-pci" "${GPU_AUDIO_PCI_ID}" "${GPU_AUDIO_DEVICE_ID}"

	# Isolate CPU cores
	set_cpus_for_systemd "${HOST_CPUS}"

	# Start the network
	if ! sudo virsh net-info "${VM_NETWORK_NAME}" | grep Active | grep -q yes; then
		sudo virsh net-start "${VM_NETWORK_NAME}"
	fi

	# Prepare hugepages
	allocate_hugepages
}

function post_vm() {
	echoerr "Cleaning up"

	# Is "Unisolate" even a word? :D
	# Unisolate GPU
	driver_bind "${GPU_DRIVER}" "${GPU_PCI_ID}" "${GPU_DEVICE_ID}"
	driver_bind "${GPU_AUDIO_DRIVER}" "${GPU_AUDIO_PCI_ID}" "${GPU_AUDIO_DEVICE_ID}"

	# Unisolate CPU cores
	set_cpus_for_systemd "${ALL_CPUS}"

	# Stop the network
	sudo virsh net-destroy "${VM_NETWORK_NAME}"

	# Free hugepages
	# TODO: is this really needed?
	free_hugepages

	# Enable the screen again
	if [[ "${AUTORANDR_ENABLE}" == "true" ]]; then
		autorandr -l "${AUTORANDR_DEFAULT}"
		if [[ "${AUTORANDR_STATE}" == "enabled" ]]; then
			echoerr "Reenabling autorandr service"
			sudo systemctl enable autorandr
		fi
	fi
}

function start_vm() {
	sudo virsh start "${VM_NAME}"
}

function wait_for_vm_to_shut_down() {
	# Switch the screen
	if [[ "${AUTORANDR_ENABLE}" == "true" ]]; then
		autorandr -l "${AUTORANDR_PASSTHROUGH}"
		# A dummy true to make sure script doesn't fail here
		AUTORANDR_STATE="$(systemctl is-enabled autorandr)" || true
		if [[ "${AUTORANDR_STATE}" == "enabled" ]]; then
			echoerr "Temporarily disabling autorandr service"
			sudo systemctl disable autorandr
		fi
	fi

	while true; do
		sudo virsh dominfo "${VM_NAME}" | grep State | grep -q "shut off" && return
		sleep 5
	done
}

check_sudo
sanity_checks

pre_vm

start_vm
wait_for_vm_to_shut_down

echo
post_vm
